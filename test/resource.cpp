#include <iostream>

#include <lava/format.h>
#include <lava/resource.h>

class test : public lava::resource<test, lava::some<int*, 3>, void*, lava::many<double*>>
{
public:
	// the default constructor IS generated by default
	// define a custom constructor to suppress this, or manually delete it
	// test() = default;
	
	// finalizers: no custom destructor needed, all handled by the base class
	// when necessary, we should test whether the pointer passed in is nullptr
	// for lava.resource does no check on this, we should make it safe to Destroy nullptrs
	void destroy(int* x) noexcept
	{
		lava::format::legacy::format_io(std::cout, "Destructing a `int*`.", lava::format::legacy::endl);
	}
	void destroy(void* x) noexcept
	{
		lava::format::legacy::format_io(std::cout, "Destructing a `void*`.", lava::format::legacy::endl);
	}
	void destroy(double* x) noexcept
	{
		lava::format::legacy::format_io(std::cout, "Destructing a `double*`.", lava::format::legacy::endl);
	}
	// define getter functions
	// these functions return references, so we can modify the value
	// the const versions return values instead
	DEFINE_GETTER_N(int*, FirstInt, 0)
	DEFINE_GETTER_N(int*, SecondInt, 1)
	DEFINE_GETTER_N(int*, ThirdInt, 2)
	DEFINE_GETTER(void*, VoidPointer)
	DEFINE_GETTER_MANY(double*, Double)
};

int main()
{
	test t;
	// move from self errors are detected using an assertion
	try
	{
		t = std::move(t);
	}
	catch (std::runtime_error& e)
	{
		lava::format::legacy::format_io(std::cerr, "Error: ", e.what(), lava::format::legacy::endl);
	}
	// use getter functions defined in class using DEFINE_GETTER_* macros
	// all these functions return resources by reference
	// while the const version returns value instead
	// t.getDouble(0);
	// the above line should raise a out-of-range error, for the vector is not initialized at all
	t.getDoubles();		// returns the std::vector<double*>
	t.getFirstInt();	// returns the first int*
	t.getVoidPointer(); // returns the void*
	return 0;
}
